@import url("https://fonts.googleapis.com/css2?family=Overlock:ital,wght@0,400;0,700;0,900;1,400;1,700;1,900&display=swap");:where(:not(html,iframe,canvas,img,svg,video,audio):not(svg *,symbol *)){all:unset;display:revert}*,:after,:before{box-sizing:border-box}a,button{cursor:revert}menu,ol,ul{list-style:none}img{max-inline-size:100%;max-block-size:100%}table{border-collapse:collapse}input,textarea{-webkit-user-select:auto}textarea{white-space:revert}meter{-webkit-appearance:revert;appearance:revert}:where(pre){all:revert}::placeholder{color:unset}::marker{content:normal}:where([hidden]){display:none}:where([contenteditable]:not([contenteditable=false])){-moz-user-modify:read-write;-webkit-user-modify:read-write;overflow-wrap:break-word;-webkit-line-break:after-white-space;-webkit-user-select:auto}:where([draggable=true]){-webkit-user-drag:element}:where(dialog:modal){all:revert}:root{--white:#edfafd;--primary-cool-color:#54c9e4;--secondary-cool-color:#119dbd;--primary-warm-color:#f6e642}body{font-family:Overlock,Helvetica,Arial,sans-serif;font-size:1rem;line-height:1.5;font-weight:400;font-style:normal;color:var(--white)}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{font-weight:700;margin-bottom:.35em}h1,h2,h3,h4,h5,h6{color:var(--primary-warm-color);text-align:center}.h1,h1{font-size:3.5555555556rem;line-height:1.1;font-weight:900}.h2,h2{font-size:2.3333333333rem;line-height:1.2}.h3,h3{font-size:1.5555555556rem;line-height:1.3}body{background-color:#54c9e4;background:radial-gradient(48.66% 57.22% at 50% 43.63%,#74d8ef 0,#16bae0 40%,#0c92b0 100%)}:root{--base-spacing:1.3888888889rem}body{padding:1.3888888889rem}section{padding:2.7777777778rem 0}form{padding:1.3888888889rem 0}section{text-align:center}.sr-only{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);border:0}form{display:flex;flex-flow:row wrap}form .form-field{flex:0 0 25%;max-width:25%;padding:1.3888888889rem}fieldset,input[type=text]{display:block;width:100%;padding:.75em 1em;border-radius:.3888888889rem;background:hsla(0,0%,100%,.8);border:.1666666667rem solid var(--secondary-cool-color);color:var(--secondary-cool-color)}input[type=text]::-webkit-input-placeholder{color:var(--primary-cool-color)}input[type=text]:-moz-placeholder,input[type=text]::-moz-placeholder{color:var(--primary-cool-color)}input[type=text]:-ms-input-placeholder{color:var(--primary-cool-color)}label{display:inline-block;margin-bottom:.2777777778rem}fieldset{position:relative;margin-top:1.7777777778rem}fieldset legend{position:absolute;bottom:calc(100% + .4444444444rem);left:0;color:var(--white)}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
